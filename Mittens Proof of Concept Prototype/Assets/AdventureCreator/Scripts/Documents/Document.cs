/*
 *
 *	Adventure Creator
 *	by Chris Burton, 2013-2019
 *	
 *	"Document.cs"
 * 
 *	An asset file that stores data for a document, which can be viewed/read in a Menu
 * 
 */

using UnityEngine;
#if UNITY_EDITOR
using UnityEditor;
#endif

using System.Collections.Generic;

namespace AC
{

	/**
	 * An asset file that stores data for a document, which can be viewed/read in a Menu
	 */
	[System.Serializable]
	public class Document : ITranslatable
	{

		/** A unique identifier */
		public int ID;
		/** The title */
		public string title;
		/** The translation ID number of the title, as generated by SpeechManager */
		public int titleLineID = -1;
		/** If True, the Document will be re-opened at the same page that it was closed at */
		public bool rememberLastOpenPage = false;
		/** If True, the Document will be in the Player's collection when the game begins */
		public bool carryOnStart = false;
		/** A Texture2D associated with the Document. */
		public Texture2D texture;
		/** A List of JournalPages that make up the contents of the Document */
		public List<JournalPage> pages = new List<JournalPage>();


		/**
		 * <summary>The default Constructor.</summary>
		 * <param name = "idArray">An array of already-used ID numbers, so that a unique ID number can be assigned</param>
		 */
		public Document (int[] idArray)
		{
			title = "";
			titleLineID = -1;
			rememberLastOpenPage = false;
			texture = null;
			pages = new List<JournalPage>();
			carryOnStart = false;

			ID = 0;
			// Update id based on array
			foreach (int _id in idArray)
			{
				if (ID == _id)
					ID ++;
			}
		}


		/**
		 * <summary>A Constructor in which the ID is explicitly set.</summary>
		 * <param name = "_ID">The ID number to assign</param>
		 */
		public Document (int _ID)
		{
			title = "";
			titleLineID = -1;
			rememberLastOpenPage = false;
			texture = null;
			pages = new List<JournalPage>();
			carryOnStart = false;

			ID = _ID;
		}


		/**
		 * The Document's title.  This will set the title to '(Untitled)' if empty.
		 */
		public string Title
		{
			get
			{
				if (string.IsNullOrEmpty (title))
				{
					title = "(Untitled)";
				}
				return title;
			}
		}


		#if UNITY_EDITOR

		private int sidePage;
		private int selectedPage;
		private Vector2 scrollPos;
		private bool showPageGUI = true;


		public void ClearIDs ()
		{
			titleLineID = -1;
			foreach (JournalPage page in pages)
			{
				page.lineID = -1;
			}
		}


		public void ShowGUI (string apiPrefix)
		{
			title = CustomGUILayout.TextField ("Title:", title, apiPrefix + ".title");
			if (titleLineID > -1)
			{
				EditorGUILayout.LabelField ("Speech Manager ID:", titleLineID.ToString ());
			}

			texture = (Texture2D) CustomGUILayout.ObjectField <Texture2D> ("Texture:", texture, false, apiPrefix + ".texture", "A Texture2D associated with the Document");
			carryOnStart = CustomGUILayout.Toggle ("Carry on start?", carryOnStart, apiPrefix + ".carryOnStart", "If True, the Document will be in the Player's collection when the game begins");
			rememberLastOpenPage = CustomGUILayout.Toggle ("Remember last-open page?", rememberLastOpenPage, ".rememberLastOpenPage", "If True, the Document will be re-opened at the same page that it was closed at");

			EditorGUILayout.Space ();

			if (pages == null || pages.Count == 0)
			{
				pages.Clear ();
				pages.Add (new JournalPage ());
			}

			scrollPos = EditorGUILayout.BeginScrollView (scrollPos, GUILayout.Height (Mathf.Min (pages.Count * 21, 185f)+5));
			for (int i=0; i<pages.Count; i++)
			{
				EditorGUILayout.BeginHorizontal ();

				if (GUILayout.Toggle (selectedPage == i, "Page #" + i.ToString (), "Button"))
				{
					if (selectedPage != i)
					{
						selectedPage = i;
						EditorGUIUtility.editingTextField = false;
					}
				}

				if (GUILayout.Button ("", CustomStyles.IconCog))
				{
					sidePage = i;
					EditorGUIUtility.editingTextField = false;
					SidePageMenu ();
				}
				EditorGUILayout.EndHorizontal ();
			}
			EditorGUILayout.EndScrollView ();

			if (GUILayout.Button ("Create new page"))
			{
				Undo.RecordObject (KickStarter.inventoryManager, "Add Document page");
				pages.Add (new JournalPage ());

				if (pages.Count == 1)
				{
					selectedPage = 0;
					EditorGUIUtility.editingTextField = false;
				}
			}
			EditorGUILayout.EndVertical ();

			EditorGUILayout.Space ();

			if (selectedPage >= 0 && pages.Count > selectedPage)
			{
				EditorGUILayout.BeginVertical ("Button");
				showPageGUI = CustomGUILayout.ToggleHeader (showPageGUI, "Document page #" + selectedPage);
				if (showPageGUI)
				{
					CustomGUILayout.LabelField ("Page text:", apiPrefix + ".pages[" + selectedPage + "].text");
					pages[selectedPage].text = EditorGUILayout.TextArea (pages[selectedPage].text);
				}
				EditorGUILayout.EndVertical ();
			}
		}


		private void SidePageMenu ()
		{
			GenericMenu menu = new GenericMenu ();

			menu.AddItem (new GUIContent ("Insert after"), false, PageCallback, "Insert after");
			if (pages.Count > 1)
			{
				menu.AddItem (new GUIContent ("Delete"), false, PageCallback, "Delete");
			}

			if (sidePage > 0 || sidePage < pages.Count-1)
			{
				menu.AddSeparator ("");
				if (sidePage > 0)
				{
					menu.AddItem (new GUIContent ("Re-arrange/Move to top"), false, PageCallback, "Move to top");
					menu.AddItem (new GUIContent ("Re-arrange/Move up"), false, PageCallback, "Move up");
				}
				if (sidePage < pages.Count-1)
				{
					menu.AddItem (new GUIContent ("Re-arrange/Move down"), false, PageCallback, "Move down");
					menu.AddItem (new GUIContent ("Re-arrange/Move to bottom"), false, PageCallback, "Move to bottom");
				}
			}
			
			menu.ShowAsContext ();
		}


		private void PageCallback (object obj)
		{
			if (sidePage >= 0)
			{
				switch (obj.ToString ())
				{
					case "Insert after":
						Undo.RecordObject (KickStarter.inventoryManager, "Insert Document page");
						pages.Insert (sidePage+1, new JournalPage ());
						break;
						
					case "Delete":
						Undo.RecordObject (KickStarter.inventoryManager, "Delete Document page");
						if (sidePage == selectedPage)
						{
							selectedPage = -1;
						}
						pages.RemoveAt (sidePage);
						break;
						
					case "Move up":
						Undo.RecordObject (KickStarter.inventoryManager, "Move page up");
						if (sidePage == selectedPage)
						{
							selectedPage --;
						}
						SwapPages (sidePage, sidePage-1);
						break;
						
					case "Move down":
						Undo.RecordObject (KickStarter.inventoryManager, "Move page down");
						if (sidePage == selectedPage)
						{
							selectedPage ++;
						}
						SwapPages (sidePage, sidePage+1);
						break;

					case "Move to top":
						Undo.RecordObject (KickStarter.inventoryManager, "Move page to top");
						if (sidePage == selectedPage)
						{
							selectedPage --;
						}
						MovePageToTop (sidePage);
						break;
					
					case "Move to bottom":
						Undo.RecordObject (KickStarter.inventoryManager, "Move page to bottom");
						if (sidePage == selectedPage)
						{
							selectedPage ++;
						}
						MovePageToBottom (sidePage);
						break;
				}
			}
			
			sidePage = -1;
		}


		private void MovePageToTop (int a1)
		{
			JournalPage tempPage = pages[a1];
			pages.Insert (0, tempPage);
			pages.RemoveAt (a1+1);
		}


		private void MovePageToBottom (int a1)
		{
			JournalPage tempPage = pages[a1];
			pages.Add (tempPage);
			pages.RemoveAt (a1);
		}
		

		private void SwapPages (int a1, int a2)
		{
			JournalPage tempPage = pages[a1];
			pages[a1] = pages[a2];
			pages[a2] = tempPage;
		}

		#endif


		/** ITranslatable implementation */

		public string GetTranslatableString (int index)
		{
			if (index == 0)
			{
				return Title;
			}
			else
			{
				return pages[index-1].text;
			}
		}


		public int GetTranslationID (int index)
		{
			if (index == 0)
			{
				return titleLineID;
			}
			else
			{
				return pages[index-1].lineID;
			}
		}


		#if UNITY_EDITOR

		public int GetNumTranslatables ()
		{
			if (pages != null) return pages.Count + 1;
			return 1;
		}


		public bool HasExistingTranslation (int index)
		{
			if (index == 0)
			{
				return titleLineID > -1;
			}
			else
			{
				return (pages[index-1].lineID > -1);
			}
		}



		public void SetTranslationID (int index, int _lineID)
		{
			if (index == 0)
			{
				titleLineID = _lineID;
			}
			else
			{
				pages[index-1].lineID = _lineID;
			}
		}


		public string GetOwner ()
		{
			return string.Empty;
		}


		public bool OwnerIsPlayer ()
		{
			return false;
		}


		public AC_TextType GetTranslationType (int index)
		{
			return AC_TextType.Document;
		}


		public bool CanTranslate (int index)
		{
			if (index == 0)
			{
				return !string.IsNullOrEmpty (title);
			}
			return (!string.IsNullOrEmpty (pages[index-1].text));
		}

		#endif

	}

}